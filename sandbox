@bot.message_handler(regexp=f'^{TOP_LINKS}$')
def top_links_handler(msg):
    keyboard = get_top_links_keyboard()
    bot.send_message(msg.chat.id, text='choose period', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: TOP_24 in call.data)
def top_24_handler(call):
    stats = db_api.get_top_links(call.from_user.id)


@bot.callback_query_handler(func=lambda call: TOP_ALL in call.data)
def top_all_handler(call):
    stats = db_api.get_top_links(call.from_user.id)


def get_top_links_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='top links (24 hours', callback_data=TOP_24))
    markup.add(types.InlineKeyboardButton(text='top links (all time)', callback_data=TOP_ALL))
    return markup



def clicks_updater():
    while True:
        print('updater wackes up')
        offset = 0
        while True:
            rows = db_api.get_links(offset=offset)

            if not rows:
                break

            for old_clicks, link in rows:
                clicks_count = get_clicks_count(link)

                if isinstance(clicks_count, int) and clicks_count != old_clicks:
                    db_api.update_link_clicks(link, clicks_count)

            offset += 10

        print('updater go to sleep')
        sleep(60*30)


threading.Thread(target=clicks_updater, args=()).start()